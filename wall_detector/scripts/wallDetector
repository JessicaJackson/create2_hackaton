#!/usr/bin/env python

import rospy
from irobotcreate2.msg import RoombaIR
from wall_detector.msg import Walls

class wall_detector(object):
    def __init__(self):
        rospy.init_node('wallDetector')

        # defaults
        self.msg = Walls()
        self.msg.left = 0
        self.msg.center = 0
        self.msg.right = 0

        self.leftIR = ['base_irbumper_left', 'base_irbumper_front_left'];
        self.rightIR = ['base_irbumper_right', 'base_irbumper_front_right'];
        self.centerIR = ['base_irbumper_center_left', 'base_irbumper_center_right'];

        self.threshold = 150

        self.pub = rospy.Publisher('/wall_detector', Walls, queue_size=10)
        rospy.Subscriber("/iRobot_0/ir_bumper", RoombaIR, self.callback)

    def callback(self, data):
        leftHit = (data.header.frame_id in self.leftIR and data.signal > self.threshold)
        centerHit = (data.header.frame_id in self.centerIR and data.signal > self.threshold)
        rightHit = (data.header.frame_id in self.rightIR and data.signal > self.threshold)

        # too close!
        if leftHit:
            rospy.loginfo(rospy.get_caller_id() + "left wall found")
            self.msg.left = 1
        else:
            self.msg.left = 0

        if centerHit:
            rospy.loginfo(rospy.get_caller_id() + "center wall found")
            self.msg.center = 1
        else:
            self.msg.center = 0

        if rightHit:
            rospy.loginfo(rospy.get_caller_id() + "right wall found")
            self.msg.right = 1
        else:
            self.msg.right = 0

    def run(self):
        rospy.loginfo("RUNNING")
        rate = rospy.Rate(10) # 10hz
        rospy.spin()
        while not rospy.is_shutdown():
            self.pub.publish(self.msg)
            rate.sleep()

if __name__ == "__main__":
    wd = wall_detector()
    wd.run()
